image: docker:latest

services:
  - docker:dind

variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"

before_script:
  - |
    if [ -x "$(command -v docker)" ]; then  
      docker --version
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    fi
  - |
    [ -x "$(command -v terraform)" ] && terraform --version

stages:
  - build-base
  - build-tools
  - build-pipeline
  - test
  - push-tags
  - deploy
  
include:
  - template: Container-Scanning.gitlab-ci.yml
  # uncomment next if it is for app.
  #- template: Dependency-Scanning.gitlab-ci.yml

container_scanning:
  variables:
    GIT_STRATEGY: fetch
    KLAR_TRACE: "true"

.build-docker:
  only:
    refs:
      - branches
    changes:
      - .gitlab-ci.yml
  variables:
    SUB_IMAGE: ""
    DOCKERFILE: "Dockerfile"
  script:
    - docker pull $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG$SUB_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG$SUB_IMAGE:latest --build-arg IMAGE_REF=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG --tag $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG$SUB_IMAGE:$CI_COMMIT_SHA -f $DOCKERFILE .
    - docker push $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG$SUB_IMAGE:$CI_COMMIT_SHA
    - docker tag  $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG$SUB_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG$SUB_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG$SUB_IMAGE:latest
    - |
      if [[ -z $SUB_IMAGE ]]; then
        docker tag  $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
        docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      fi


build-base:
  extends: .build-docker
  only:
    changes:
      - base.Dockerfile
      - .gitlab-ci.yml
  variables:
    SUB_IMAGE: "/base"
    DOCKERFILE: "base.Dockerfile"
  stage: build-base

build-tools:
  extends: .build-docker
  only:
    changes:
      - base.Dockerfile
      - tools.Dockerfile
      - .gitlab-ci.yml
  variables:
    SUB_IMAGE: "/tools"
    DOCKERFILE: "tools.Dockerfile"
  stage: build-tools

build-pipeline:
  extends: .build-docker
  only:
    changes:
      - base.Dockerfile  
      - tools.Dockerfile
      - Dockerfile
      - bin/*
      - .gitlab-ci.yml
  variables:
    SUB_IMAGE: ""
    DOCKERFILE: "Dockerfile"
  stage: build-pipeline
    
push-tags:
  only:
    - tags
  stage: push-tags
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag  $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - apk add curl
    # In near future Gitlab release-cli will be used here.
    #- echo "Release -- https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/releases"
    #- |
    #  curl --header 'Content-Type: application/json' --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
    #   --data '{ "name": "${CI_COMMIT_REF_NAME}", "tag_name": "${CI_COMMIT_REF_NAME}", "description": "${CI_COMMIT_MESSAGE}", "ref": "${CI_COMMIT_REF_NAME}" }' \
    #   --request POST https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/releases

deploy:
  image:
    name: registry.gitlab.com/shiftsecurityleft/infrapipe/infrapipe-demo:v0.1
  only:
    - /^tf-.*$/
  stage: deploy
  when: manual
  environment:
    name: terraform/$CI_COMMIT_REF_NAME
  script:
    - cd examples/terraform-sample-s3-bucket
    - runTerraformByComment
  artifacts:
    paths:
      - out.tfplan


